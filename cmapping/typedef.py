# This code is autogenerated by ./generate_types.py
# If you found a bug, please, don't try to edit this file.
# Edit ./generate_types.py instead.

from cmapping.base import CType


class __Number(CType):
    def __init__(self, length=1):
        if not isinstance(length, int):
            raise ValueError("Expected integer as count of bytes")
        self.__len = length

    def __len__(self):
        return self.__len

    def __str__(self):
        if self.__len == 1:
            return type(self).fmt
        return str(self.__len) + type(self).fmt


class __Array(CType):
    def __init__(self, length):
        if not isinstance(length, int):
            raise ValueError("Expected integer as count of bytes")
        self.__len = length

    def __len__(self):
        return 1

    def __str__(self):
        if self.__len == 1:
            return type(self).fmt
        return str(self.__len) + type(self).fmt


class Char(__Number):
    fmt = 'c'


class SignedChar(__Number):
    fmt = 'b'


class UnsignedChar(__Number):
    fmt = 'B'


class Bool(__Number):
    fmt = '?'


class Short(__Number):
    fmt = 'h'


class UnsignedShort(__Number):
    fmt = 'H'


class Integer(__Number):
    fmt = 'i'


class UnsignedInteger(__Number):
    fmt = 'I'


class Long(__Number):
    fmt = 'l'


class UnsignedLong(__Number):
    fmt = 'L'


class LongLong(__Number):
    fmt = 'q'


class UnsignedLongLong(__Number):
    fmt = 'Q'


class SsizeT(__Number):
    fmt = 'n'


class SizeT(__Number):
    fmt = 'N'


class Float(__Number):
    fmt = 'f'


class Double(__Number):
    fmt = 'd'


class VoidPtr(__Number):
    fmt = 'P'


class CString(__Array):
    fmt = 's'


class PascalString(__Array):
    fmt = 'p'


class Padding(__Array):
    fmt = 'x'
